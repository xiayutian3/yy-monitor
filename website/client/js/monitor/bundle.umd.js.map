{"version":3,"file":"bundle.umd.js","sources":["../../../../sdk/perf.js","../../../../sdk/util.js","../../../../sdk/resource.js","../../../../sdk/errorCatch.js","../../../../sdk/index.js"],"sourcesContent":["\r\n//性能统计\r\n\r\nexport default {\r\n  init: (cb) => {\r\n    // cb();\r\n\r\n    let isDOMReady = false;\r\n    let isOnload = false;\r\n    let cycleTime = 100;  //这个时间可以延长一点，1 、2 、3s，不影响数据\r\n\r\n    let Util = {\r\n      getPerfData: (p) => {\r\n        let data = {\r\n          //网络建连\r\n          prevPage: p.fetchStart - p.navigationStart, //上一个页面的时间\r\n          redirect: p.redirectEnd - p.redirectStart, //重定向时间\r\n          dns: p.domainLookupEnd - p.domainLookupStart,//DNS查找时间\r\n          connect: p.connectEnd - p.connectStart,//TCP建连时间\r\n          network: p.connectEnd - p.navigationStart, //网络总耗时\r\n\r\n          //网络接收\r\n          send: p.responseStart - p.requestStart, //前端从发送到接受的时间\r\n          receive: p.responseEnd - p.responseStart, //接受数据用时\r\n          request: p.responseEnd - p.requestStart,  //请求页面的总耗时\r\n\r\n\r\n          //前端渲染\r\n          dom: p.domComplete - p.domLoading,  // dom解析时间\r\n          loadEvent: p.loadEventEnd - p.loadEventStart, // loadEvent时间\r\n          frontend: p.loadEventEnd - p.domLoading, //前端总时间\r\n\r\n          //关键阶段\r\n          load: p.loadEventEnd - p.navigationStart, //页面完全加载的时间\r\n          domReady: p.domContentLoadedEventStart - p.navigationStart, //dom准备好时间\r\n          interactive: p.domInteractive - p.navigationStart, //可操作时间\r\n          ttfb: p.responseStart - p.navigationStart, //首字节时间\r\n        }\r\n        return data;\r\n      },\r\n      //DOM解析完成\r\n      domready: (callback) => {\r\n        if (isDOMReady == true) return\r\n        let timer = null;\r\n\r\n        let runCheck = () => {\r\n          if (performance.timing.domComplete) {\r\n            //1.停止循环检测，2.运行callback\r\n            clearTimeout(timer)\r\n            callback()\r\n            isDOMReady = true\r\n          } else {\r\n            //再去循环检测\r\n            timer = setTimeout(runCheck, cycleTime)\r\n          }\r\n        }\r\n\r\n        if (document.readyState == 'interactive') {\r\n          callback()\r\n          return;\r\n        }\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n          //开始循环检测，是否 DOMContentLoaded 已经完成\r\n          runCheck()\r\n        })\r\n      },\r\n      //页面加载完成\r\n      onload: (callback) => {\r\n        if (isOnload == true) return\r\n        let timer = null;\r\n\r\n        let runCheck = () => {\r\n          if (performance.timing.loadEventEnd ) {\r\n            //1.停止循环检测，2.运行callback\r\n            clearTimeout(timer)\r\n            callback()\r\n            isOnload = true\r\n          } else {\r\n            //再去循环检测\r\n            timer = setTimeout(runCheck,cycleTime)\r\n          }\r\n        }\r\n\r\n        if (document.readyState == 'complete') {\r\n          callback()\r\n          return;\r\n        }\r\n        window.addEventListener('load', () => {\r\n          //开始循环检测，是否 load 已经完成\r\n          runCheck()\r\n        },false)\r\n\r\n      }\r\n    }\r\n    let performance = window.performance;\r\n\r\n    Util.domready(() => {\r\n      let perfData = Util.getPerfData(performance.timing)\r\n      // console.log('perfData', perfData)\r\n      perfData.type = 'domready'\r\n      // 获取到数据应该给sdk上层 去上传这个数据\r\n      // debugger\r\n      cb(perfData)\r\n    })\r\n    Util.onload(() => {\r\n      let perfData = Util.getPerfData(performance.timing)\r\n      // console.log('perfData', perfData)\r\n      perfData.type = 'onload'\r\n      // 获取到数据应该给sdk上层 去上传这个数据\r\n      // debugger\r\n      cb(perfData)\r\n    })\r\n\r\n\r\n    // document.addEventListener('DOMContentLoaded',()=>{\r\n    //   //DOMContentLoaded事件也会存在同样的问题，所以也要加settimeout\r\n    //   // let perfData = Util.getPerfData(performance.timing)\r\n    //   // debugger\r\n    // })\r\n\r\n    // window.addEventListener('load', () => {\r\n    //   //获取的结果会不一样 所以会加settimeout，不然某些值会出现负数\r\n    //   // let perfData = Util.getPerfData(performance.timing)\r\n    //   // debugger\r\n\r\n    //   setTimeout(() => {\r\n    //     console.log('performance: ', performance.timing);\r\n    //     let perfData = Util.getPerfData(performance.timing)\r\n    //     debugger\r\n    //   }, 100)\r\n    // })\r\n  }\r\n}","export default {\r\n  //资源加载结束后，调用回调\r\n  onload: (cb)=>{\r\n    if(document.readyState == 'complete'){\r\n      cb()\r\n      return\r\n    }else{\r\n      window.addEventListener('load',()=>{\r\n        cb()\r\n      })\r\n    }\r\n  }\r\n}","//资源加载监控\r\n// performance.getEntries()\r\n\r\nimport util from \"./util\"\r\n\r\nlet resolvePerformanceResource = (resourceData) => {\r\n  let r = resourceData\r\n  debugger\r\n  let o = {\r\n    initiatorType: r.initiatorType, //请求资源类型\r\n    name: r.name, //资源名称\r\n    duration: parseInt(r.duration), //请求资源加载了多长时间\r\n\r\n    //连接过程\r\n    redirect:r.redirectEnd - r.redirectStart,  //重定向时间\r\n    dns:r.domainLookupEnd - r.domainLookupStart  //DNS查找时间\r\n\r\n\r\n  };\r\n  return o\r\n}\r\n\r\nexport default {\r\n  init: (cb) => {\r\n    //资源加载结束后\r\n    util.onload(() => {\r\n      let entries = performance.getEntriesByType('resource');\r\n      // console.log('entries: ', entries);\r\n      let d = resolvePerformanceResource(entries[0])\r\n      debugger;\r\n    })\r\n  }\r\n}","//错误捕获\r\n\r\nexport default {\r\n  init:(cb)=>{\r\n    cb()\r\n  }\r\n}","import perf from './perf'\r\nimport resource from './resource'\r\nimport errorCatch from './errorCatch'\r\n\r\n\r\n//性能指标\r\nperf.init((perfData)=>{\r\n  //performance timing\r\n  // console.log('perfData: ', perfData);\r\n  // console.log('perf init')\r\n})\r\n\r\n//资源监控\r\nresource.init((resource)=>{\r\n  console.log('resource: ', resource);\r\n\r\n})\r\n\r\nerrorCatch.init(()=>{\r\n  console.log('errorCatch init')\r\n})"],"names":["init","cb","isDOMReady","isOnload","cycleTime","Util","getPerfData","p","data","prevPage","fetchStart","navigationStart","redirect","redirectEnd","redirectStart","dns","domainLookupEnd","domainLookupStart","connect","connectEnd","connectStart","network","send","responseStart","requestStart","receive","responseEnd","request","dom","domComplete","domLoading","loadEvent","loadEventEnd","loadEventStart","frontend","load","domReady","domContentLoadedEventStart","interactive","domInteractive","ttfb","domready","callback","timer","runCheck","performance","timing","clearTimeout","setTimeout","document","readyState","addEventListener","onload","window","perfData","type","resolvePerformanceResource","resourceData","r","o","initiatorType","name","duration","parseInt","util","entries","getEntriesByType","perf","resource","console","log","errorCatch"],"mappings":"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"}